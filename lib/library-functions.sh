#!/usr/bin/env bash
# This file is/was autogenerated by ./lib/tools/gen-library.sh; don't modify manually

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-armbian-base-files.sh
# shellcheck source="./functions/artifacts/artifact-armbian-base-files.sh"
. "$SRC/lib/functions/artifacts/artifact-armbian-base-files.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-armbian-bsp-cli.sh
# shellcheck source="./functions/artifacts/artifact-armbian-bsp-cli.sh"
. "$SRC/lib/functions/artifacts/artifact-armbian-bsp-cli.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-armbian-bsp-desktop.sh
# shellcheck source="./functions/artifacts/artifact-armbian-bsp-desktop.sh"
. "$SRC/lib/functions/artifacts/artifact-armbian-bsp-desktop.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-armbian-config.sh
# shellcheck source="./functions/artifacts/artifact-armbian-config.sh"
. "$SRC/lib/functions/artifacts/artifact-armbian-config.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-armbian-desktop.sh
# shellcheck source="./functions/artifacts/artifact-armbian-desktop.sh"
. "$SRC/lib/functions/artifacts/artifact-armbian-desktop.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-armbian-plymouth-theme.sh
# shellcheck source="./functions/artifacts/artifact-armbian-plymouth-theme.sh"
. "$SRC/lib/functions/artifacts/artifact-armbian-plymouth-theme.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-armbian-zsh.sh
# shellcheck source="./functions/artifacts/artifact-armbian-zsh.sh"
. "$SRC/lib/functions/artifacts/artifact-armbian-zsh.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-fake-ubuntu-advantage-tools.sh
# shellcheck source="./functions/artifacts/artifact-fake-ubuntu-advantage-tools.sh"
. "$SRC/lib/functions/artifacts/artifact-fake-ubuntu-advantage-tools.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-firmware.sh
# shellcheck source="./functions/artifacts/artifact-firmware.sh"
. "$SRC/lib/functions/artifacts/artifact-firmware.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-full_firmware.sh
# shellcheck source="./functions/artifacts/artifact-full_firmware.sh"
. "$SRC/lib/functions/artifacts/artifact-full_firmware.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-kernel.sh
# shellcheck source="./functions/artifacts/artifact-kernel.sh"
. "$SRC/lib/functions/artifacts/artifact-kernel.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-rootfs.sh
# shellcheck source="./functions/artifacts/artifact-rootfs.sh"
. "$SRC/lib/functions/artifacts/artifact-rootfs.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifacts-obtain.sh
# shellcheck source="./functions/artifacts/artifacts-obtain.sh"
. "$SRC/lib/functions/artifacts/artifacts-obtain.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifacts-registry.sh
# shellcheck source="./functions/artifacts/artifacts-registry.sh"
. "$SRC/lib/functions/artifacts/artifacts-registry.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifacts-reversion.sh
# shellcheck source="./functions/artifacts/artifacts-reversion.sh"
. "$SRC/lib/functions/artifacts/artifacts-reversion.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/artifacts/artifact-uboot.sh
# shellcheck source="./functions/artifacts/artifact-uboot.sh"
. "$SRC/lib/functions/artifacts/artifact-uboot.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/bsp/armbian-bsp-cli-deb.sh
# shellcheck source="./functions/bsp/armbian-bsp-cli-deb.sh"
. "$SRC/lib/functions/bsp/armbian-bsp-cli-deb.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/bsp/armbian-bsp-desktop-deb.sh
# shellcheck source="./functions/bsp/armbian-bsp-desktop-deb.sh"
. "$SRC/lib/functions/bsp/armbian-bsp-desktop-deb.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/bsp/utils-bsp.sh
# shellcheck source="./functions/bsp/utils-bsp.sh"
. "$SRC/lib/functions/bsp/utils-bsp.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-artifact.sh
# shellcheck source="./functions/cli/cli-artifact.sh"
. "$SRC/lib/functions/cli/cli-artifact.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-build.sh
# shellcheck source="./functions/cli/cli-build.sh"
. "$SRC/lib/functions/cli/cli-build.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-configdump.sh
# shellcheck source="./functions/cli/cli-configdump.sh"
. "$SRC/lib/functions/cli/cli-configdump.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-distccd.sh
# shellcheck source="./functions/cli/cli-distccd.sh"
. "$SRC/lib/functions/cli/cli-distccd.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-docker.sh
# shellcheck source="./functions/cli/cli-docker.sh"
. "$SRC/lib/functions/cli/cli-docker.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-flash.sh
# shellcheck source="./functions/cli/cli-flash.sh"
. "$SRC/lib/functions/cli/cli-flash.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-jsoninfo.sh
# shellcheck source="./functions/cli/cli-jsoninfo.sh"
. "$SRC/lib/functions/cli/cli-jsoninfo.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-oras.sh
# shellcheck source="./functions/cli/cli-oras.sh"
. "$SRC/lib/functions/cli/cli-oras.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-patch.sh
# shellcheck source="./functions/cli/cli-patch.sh"
. "$SRC/lib/functions/cli/cli-patch.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-requirements.sh
# shellcheck source="./functions/cli/cli-requirements.sh"
. "$SRC/lib/functions/cli/cli-requirements.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/cli-undecided.sh
# shellcheck source="./functions/cli/cli-undecided.sh"
. "$SRC/lib/functions/cli/cli-undecided.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/commands.sh
# shellcheck source="./functions/cli/commands.sh"
. "$SRC/lib/functions/cli/commands.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/entrypoint.sh
# shellcheck source="./functions/cli/entrypoint.sh"
. "$SRC/lib/functions/cli/entrypoint.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/cli/utils-cli.sh
# shellcheck source="./functions/cli/utils-cli.sh"
. "$SRC/lib/functions/cli/utils-cli.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/armbian-kernel.sh
# shellcheck source="./functions/compilation/armbian-kernel.sh"
. "$SRC/lib/functions/compilation/armbian-kernel.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/atf.sh
# shellcheck source="./functions/compilation/atf.sh"
. "$SRC/lib/functions/compilation/atf.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/ccache.sh
# shellcheck source="./functions/compilation/ccache.sh"
. "$SRC/lib/functions/compilation/ccache.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/crust.sh
# shellcheck source="./functions/compilation/crust.sh"
. "$SRC/lib/functions/compilation/crust.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/distcc.sh
# shellcheck source="./functions/compilation/distcc.sh"
. "$SRC/lib/functions/compilation/distcc.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/kernel-config.sh
# shellcheck source="./functions/compilation/kernel-config.sh"
. "$SRC/lib/functions/compilation/kernel-config.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/kernel-debs.sh
# shellcheck source="./functions/compilation/kernel-debs.sh"
. "$SRC/lib/functions/compilation/kernel-debs.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/kernel-git-bundle.sh
# shellcheck source="./functions/compilation/kernel-git-bundle.sh"
. "$SRC/lib/functions/compilation/kernel-git-bundle.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/kernel-git-oras.sh
# shellcheck source="./functions/compilation/kernel-git-oras.sh"
. "$SRC/lib/functions/compilation/kernel-git-oras.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/kernel-git.sh
# shellcheck source="./functions/compilation/kernel-git.sh"
. "$SRC/lib/functions/compilation/kernel-git.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/kernel-make.sh
# shellcheck source="./functions/compilation/kernel-make.sh"
. "$SRC/lib/functions/compilation/kernel-make.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/kernel-patching.sh
# shellcheck source="./functions/compilation/kernel-patching.sh"
. "$SRC/lib/functions/compilation/kernel-patching.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/kernel.sh
# shellcheck source="./functions/compilation/kernel.sh"
. "$SRC/lib/functions/compilation/kernel.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/packages/armbian-config-deb.sh
# shellcheck source="./functions/compilation/packages/armbian-config-deb.sh"
. "$SRC/lib/functions/compilation/packages/armbian-config-deb.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/packages/armbian-desktop-deb.sh
# shellcheck source="./functions/compilation/packages/armbian-desktop-deb.sh"
. "$SRC/lib/functions/compilation/packages/armbian-desktop-deb.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/packages/armbian-plymouth-theme-deb.sh
# shellcheck source="./functions/compilation/packages/armbian-plymouth-theme-deb.sh"
. "$SRC/lib/functions/compilation/packages/armbian-plymouth-theme-deb.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/packages/armbian-zsh-deb.sh
# shellcheck source="./functions/compilation/packages/armbian-zsh-deb.sh"
. "$SRC/lib/functions/compilation/packages/armbian-zsh-deb.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/packages/fake_ubuntu_advantage_tools-deb.sh
# shellcheck source="./functions/compilation/packages/fake_ubuntu_advantage_tools-deb.sh"
. "$SRC/lib/functions/compilation/packages/fake_ubuntu_advantage_tools-deb.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/packages/firmware-deb.sh
# shellcheck source="./functions/compilation/packages/firmware-deb.sh"
. "$SRC/lib/functions/compilation/packages/firmware-deb.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/packages/utils-dpkgdeb.sh
# shellcheck source="./functions/compilation/packages/utils-dpkgdeb.sh"
. "$SRC/lib/functions/compilation/packages/utils-dpkgdeb.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/patch/drivers-harness.sh
# shellcheck source="./functions/compilation/patch/drivers-harness.sh"
. "$SRC/lib/functions/compilation/patch/drivers-harness.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/patch/drivers_network.sh
# shellcheck source="./functions/compilation/patch/drivers_network.sh"
. "$SRC/lib/functions/compilation/patch/drivers_network.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/patch/patching.sh
# shellcheck source="./functions/compilation/patch/patching.sh"
. "$SRC/lib/functions/compilation/patch/patching.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/uboot-git.sh
# shellcheck source="./functions/compilation/uboot-git.sh"
. "$SRC/lib/functions/compilation/uboot-git.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/uboot-patching.sh
# shellcheck source="./functions/compilation/uboot-patching.sh"
. "$SRC/lib/functions/compilation/uboot-patching.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/uboot.sh
# shellcheck source="./functions/compilation/uboot.sh"
. "$SRC/lib/functions/compilation/uboot.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/compilation/utils-compilation.sh
# shellcheck source="./functions/compilation/utils-compilation.sh"
. "$SRC/lib/functions/compilation/utils-compilation.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/configuration/aggregation.sh
# shellcheck source="./functions/configuration/aggregation.sh"
. "$SRC/lib/functions/configuration/aggregation.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/configuration/compilation-config.sh
# shellcheck source="./functions/configuration/compilation-config.sh"
. "$SRC/lib/functions/configuration/compilation-config.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/configuration/config-desktop.sh
# shellcheck source="./functions/configuration/config-desktop.sh"
. "$SRC/lib/functions/configuration/config-desktop.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/configuration/interactive.sh
# shellcheck source="./functions/configuration/interactive.sh"
. "$SRC/lib/functions/configuration/interactive.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/configuration/main-config.sh
# shellcheck source="./functions/configuration/main-config.sh"
. "$SRC/lib/functions/configuration/main-config.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/configuration/menu.sh
# shellcheck source="./functions/configuration/menu.sh"
. "$SRC/lib/functions/configuration/menu.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/configuration/package-lists.sh
# shellcheck source="./functions/configuration/package-lists.sh"
. "$SRC/lib/functions/configuration/package-lists.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/apt-utils.sh
# shellcheck source="./functions/general/apt-utils.sh"
. "$SRC/lib/functions/general/apt-utils.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/bat-cat.sh
# shellcheck source="./functions/general/bat-cat.sh"
. "$SRC/lib/functions/general/bat-cat.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/chroot-helpers.sh
# shellcheck source="./functions/general/chroot-helpers.sh"
. "$SRC/lib/functions/general/chroot-helpers.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/cleaning.sh
# shellcheck source="./functions/general/cleaning.sh"
. "$SRC/lib/functions/general/cleaning.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/countdown.sh
# shellcheck source="./functions/general/countdown.sh"
. "$SRC/lib/functions/general/countdown.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/deprecations.sh
# shellcheck source="./functions/general/deprecations.sh"
. "$SRC/lib/functions/general/deprecations.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/downloads.sh
# shellcheck source="./functions/general/downloads.sh"
. "$SRC/lib/functions/general/downloads.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/extensions.sh
# shellcheck source="./functions/general/extensions.sh"
. "$SRC/lib/functions/general/extensions.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/github-actions.sh
# shellcheck source="./functions/general/github-actions.sh"
. "$SRC/lib/functions/general/github-actions.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/git-ref2info.sh
# shellcheck source="./functions/general/git-ref2info.sh"
. "$SRC/lib/functions/general/git-ref2info.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/git.sh
# shellcheck source="./functions/general/git.sh"
. "$SRC/lib/functions/general/git.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/hash-files.sh
# shellcheck source="./functions/general/hash-files.sh"
. "$SRC/lib/functions/general/hash-files.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/memoize-cached.sh
# shellcheck source="./functions/general/memoize-cached.sh"
. "$SRC/lib/functions/general/memoize-cached.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/oci-oras.sh
# shellcheck source="./functions/general/oci-oras.sh"
. "$SRC/lib/functions/general/oci-oras.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/python-tools.sh
# shellcheck source="./functions/general/python-tools.sh"
. "$SRC/lib/functions/general/python-tools.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/retry.sh
# shellcheck source="./functions/general/retry.sh"
. "$SRC/lib/functions/general/retry.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/general/shellcheck.sh
# shellcheck source="./functions/general/shellcheck.sh"
. "$SRC/lib/functions/general/shellcheck.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/apt-cacher-ng.sh
# shellcheck source="./functions/host/apt-cacher-ng.sh"
. "$SRC/lib/functions/host/apt-cacher-ng.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/basic-deps.sh
# shellcheck source="./functions/host/basic-deps.sh"
. "$SRC/lib/functions/host/basic-deps.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/docker.sh
# shellcheck source="./functions/host/docker.sh"
. "$SRC/lib/functions/host/docker.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/external-toolchains.sh
# shellcheck source="./functions/host/external-toolchains.sh"
. "$SRC/lib/functions/host/external-toolchains.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/host-release.sh
# shellcheck source="./functions/host/host-release.sh"
. "$SRC/lib/functions/host/host-release.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/host-utils.sh
# shellcheck source="./functions/host/host-utils.sh"
. "$SRC/lib/functions/host/host-utils.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/mktemp-utils.sh
# shellcheck source="./functions/host/mktemp-utils.sh"
. "$SRC/lib/functions/host/mktemp-utils.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/mountpoints.sh
# shellcheck source="./functions/host/mountpoints.sh"
. "$SRC/lib/functions/host/mountpoints.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/prepare-host.sh
# shellcheck source="./functions/host/prepare-host.sh"
. "$SRC/lib/functions/host/prepare-host.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/tmpfs-utils.sh
# shellcheck source="./functions/host/tmpfs-utils.sh"
. "$SRC/lib/functions/host/tmpfs-utils.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/host/wsl2.sh
# shellcheck source="./functions/host/wsl2.sh"
. "$SRC/lib/functions/host/wsl2.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/compress-checksum.sh
# shellcheck source="./functions/image/compress-checksum.sh"
. "$SRC/lib/functions/image/compress-checksum.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/fingerprint.sh
# shellcheck source="./functions/image/fingerprint.sh"
. "$SRC/lib/functions/image/fingerprint.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/initrd.sh
# shellcheck source="./functions/image/initrd.sh"
. "$SRC/lib/functions/image/initrd.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/loop.sh
# shellcheck source="./functions/image/loop.sh"
. "$SRC/lib/functions/image/loop.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/partitioning.sh
# shellcheck source="./functions/image/partitioning.sh"
. "$SRC/lib/functions/image/partitioning.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/rootfs-to-image.sh
# shellcheck source="./functions/image/rootfs-to-image.sh"
. "$SRC/lib/functions/image/rootfs-to-image.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/image/write-device.sh
# shellcheck source="./functions/image/write-device.sh"
. "$SRC/lib/functions/image/write-device.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/capture.sh
# shellcheck source="./functions/logging/capture.sh"
. "$SRC/lib/functions/logging/capture.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/debug-dump.sh
# shellcheck source="./functions/logging/debug-dump.sh"
. "$SRC/lib/functions/logging/debug-dump.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/display-alert.sh
# shellcheck source="./functions/logging/display-alert.sh"
. "$SRC/lib/functions/logging/display-alert.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/export-logs.sh
# shellcheck source="./functions/logging/export-logs.sh"
. "$SRC/lib/functions/logging/export-logs.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/logging.sh
# shellcheck source="./functions/logging/logging.sh"
. "$SRC/lib/functions/logging/logging.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/runners.sh
# shellcheck source="./functions/logging/runners.sh"
. "$SRC/lib/functions/logging/runners.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/section-logging.sh
# shellcheck source="./functions/logging/section-logging.sh"
. "$SRC/lib/functions/logging/section-logging.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/stacktraces.sh
# shellcheck source="./functions/logging/stacktraces.sh"
. "$SRC/lib/functions/logging/stacktraces.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/trap-logging.sh
# shellcheck source="./functions/logging/trap-logging.sh"
. "$SRC/lib/functions/logging/trap-logging.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/logging/traps.sh
# shellcheck source="./functions/logging/traps.sh"
. "$SRC/lib/functions/logging/traps.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/main/build-packages.sh
# shellcheck source="./functions/main/build-packages.sh"
. "$SRC/lib/functions/main/build-packages.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/main/config-interactive.sh
# shellcheck source="./functions/main/config-interactive.sh"
. "$SRC/lib/functions/main/config-interactive.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/main/config-prepare.sh
# shellcheck source="./functions/main/config-prepare.sh"
. "$SRC/lib/functions/main/config-prepare.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/main/default-build.sh
# shellcheck source="./functions/main/default-build.sh"
. "$SRC/lib/functions/main/default-build.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/main/rootfs-image.sh
# shellcheck source="./functions/main/rootfs-image.sh"
. "$SRC/lib/functions/main/rootfs-image.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/main/start-end.sh
# shellcheck source="./functions/main/start-end.sh"
. "$SRC/lib/functions/main/start-end.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/apt-install.sh
# shellcheck source="./functions/rootfs/apt-install.sh"
. "$SRC/lib/functions/rootfs/apt-install.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/apt-sources.sh
# shellcheck source="./functions/rootfs/apt-sources.sh"
. "$SRC/lib/functions/rootfs/apt-sources.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/boot_logo.sh
# shellcheck source="./functions/rootfs/boot_logo.sh"
. "$SRC/lib/functions/rootfs/boot_logo.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/create-cache.sh
# shellcheck source="./functions/rootfs/create-cache.sh"
. "$SRC/lib/functions/rootfs/create-cache.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/customize.sh
# shellcheck source="./functions/rootfs/customize.sh"
. "$SRC/lib/functions/rootfs/customize.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/distro-agnostic.sh
# shellcheck source="./functions/rootfs/distro-agnostic.sh"
. "$SRC/lib/functions/rootfs/distro-agnostic.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/distro-specific.sh
# shellcheck source="./functions/rootfs/distro-specific.sh"
. "$SRC/lib/functions/rootfs/distro-specific.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/post-tweaks.sh
# shellcheck source="./functions/rootfs/post-tweaks.sh"
. "$SRC/lib/functions/rootfs/post-tweaks.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/qemu-static.sh
# shellcheck source="./functions/rootfs/qemu-static.sh"
. "$SRC/lib/functions/rootfs/qemu-static.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/rootfs-create.sh
# shellcheck source="./functions/rootfs/rootfs-create.sh"
. "$SRC/lib/functions/rootfs/rootfs-create.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/rootfs-desktop.sh
# shellcheck source="./functions/rootfs/rootfs-desktop.sh"
. "$SRC/lib/functions/rootfs/rootfs-desktop.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/systemd-utils.sh
# shellcheck source="./functions/rootfs/systemd-utils.sh"
. "$SRC/lib/functions/rootfs/systemd-utils.sh"

# no errors tolerated. invoked before each sourced file to make sure.
#set -o pipefail  # trace ERR through pipes - will be enabled "soon"
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable - one day will be enabled
set -o errtrace # trace ERR through - enabled
set -o errexit  ## set -e : exit the script if any statement returns a non-true return value - enabled
### lib/functions/rootfs/trap-rootfs.sh
# shellcheck source="./functions/rootfs/trap-rootfs.sh"
. "$SRC/lib/functions/rootfs/trap-rootfs.sh"

